@startuml

skin rose

title "start lab sequence diagram"

actor User as "TA/Prof"
participant frontend
participant server
database db

User -> frontend : request queue page
frontend -> server : request queue page
server -> db : request queue data
server <- db : queue data
frontend <- server : queue page
User <- frontend : queue page

=== Relevant stuff ==

== get current queue config ==
frontend -> frontend : check if current session is in progress\n (not null)
alt no current session
    User <- frontend : display option to \n start a new \n session/check in 
else current session in progress
    frontend -> server : get current queueSession config \n (giving currentQueueSessionId)
    server -> db : get current queueSession config
    server <- db : current queueSession config
    frontend <- server : current queueSession config
    frontend -> frontend : parse config and save in variables
end
== get full queue config ==

frontend --> server : request full json config for queue
server -> db : request config
server <- db : config
frontend <- server : config
frontend -> frontend : parse config and save in variables\n(for choosing what lab to start)

====

User -> frontend : indicate load lab 1
alt no session in progress
    frontend -> server : check in user and load lab 1 json config
    server -> server : parse lab 1 json config \n (and send potential errors)
    server -> db : check in user
    server -> db : create new queueSession as "lab 1"
    server -> db : create new questionTypes\n for the queueSession for each tag
    server -> db : set currentQueueSessionId to the new session
else session already in progress (e.g. if editing the json to hotfix something during lab)
    frontend -> server : load lab 1 json config. \n (also sending currentQueueSessionId)
    server -> server : parse lab 1 json config \n (and send potential errors)
    'server -> db : request current queueSession name \n using currentQueueSessionId
    'server <- db : current queueSession name
    'alt current session name is "lab 1"
    server -> db : request old queueSessionConfig \n using currentQueueSessionId
    server <- db : old queueSessionConfig
    server -> server : inteligently compare tags of old and new config
    note left : maybe compare the tag ids. \n If there's a new tag id, make new. \n If there's a missing one, delete. \n If tag ids same but attributes different, \n find the right questionType and edit it
    server -> db : edit/delete/add new questionTypes \n for the queueSession
    note left : it might be good to warn the TA/Prof to not \n change the tag ids during a session
    server -> db : replace corresponding queueSessionConfig \n given by currentQueueSessionId with \n the new lab 1 config
    'else current session name is not "lab 1"
    'end
end

' we're not doing this, questionTypes are only to be tags
' server -> db : create new task questionTypes\n for the queueSession for each task

== Database change to queueSessionConfigId or queueSessionConfig triggers update to all clients (push) ==

server <- db : lab 1 config
frontend <- server : lab 1 config
frontend -> frontend : parse config and save in variables



@enduml